
services:
  rotator:
    build:
      context: ../
      dockerfile: ./deployments/Dockerfile
    container_name: rotator
    environment:
      RABBITMQ_SERVER: rabbitmq
      POSTGRES_SERVER: postgres
    restart: on-failure
    ports:
      - "50051:50051"
    expose:
      - 50051
    depends_on:
      - rabbitmq
      - postgres
    networks:
      rotator:

  postgres:
    image: postgres:16.3-alpine3.19
    hostname: postgres
    container_name: postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=storage
    volumes:
      - pgdata:/var/lib/postgres/data
    ports:
      - "5432:5432"
    expose:
      - 5432
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s
    networks:
      rotator:

  rabbitmq:
    image: rabbitmq:3.13.2-alpine
    container_name: rabbitmq
    environment:
      - RABBITMQ_PROTOCOL=amqp
      - RABBITMQ_USERNAME=guest
      - RABBITMQ_PASSWORD=guest
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
    ports:
      - "5672:5672"
      - "15672:15672"
    expose:
      - 5672
      - 15672
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      rotator:

networks:
  rotator:

volumes:
  pgdata:
